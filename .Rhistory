x <- c(1,2,3,4,5)
mean(x)
sd(x0)
sd(x)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/nc.Rdata"))
names(nc)
summary(nc)
summary(nc$gained)
boxplot(nc$gained)
plot(nc$gained)
boxplot(nc$gained)
summary(nc$gained)
gained_clean = na.omit(nc$gained)
gained_clean
n = length(gained_cleaan)
n = length(gained_clean)
n
boot)means <- rep(NA,100)
boot_means <- rep(NA,100)
hist(boot_meaans)
boot_means <- rep(NA,100)
for (i in 1:100){
# realizo amostras de tamanho n (neste caso 973) da prÃ³pria
# amostra
boot_samp <- sample(gained_clean, size=n, replace=T)
# realizo o processo 100 vezes e coloco dentro do vetor
# boot_means definido fora do "for"
boot_means[i] <- mean(boot_samp)
}
hist(boot_meaans)
hist(boot_means)
summary(nc$gained)
summary(boot_means)
load(url(http://assets.datacamp.com/course/dasi/inference.Rdata))
load(url(http://assets.datacamp.com/course/dasi/inference.Rdata))
inference(nc$gained, type = "ci", method="simulation",
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
inference(nc$gained, type = "ci", method="simulation",
conflevel=0.9, est ="mean",boot_method="perc")
?inference
inf <- inference(nc$gained, type = "ci", method="simulation",
conflevel=0.9, est ="mean",boot_method="perc")
summary(inf)
ls(inf)
infr
inf
inf <- inference(nc$gained, type = "ci", method="simulation",
conflevel=0.9, est ="mean",boot_method="perc")
load(url("http://assets.datacamp.com/course/dasi/inference.Rdata"))
inf <- inference(nc$gained, type = "ci", method="simulation",
conflevel=0.9, est ="mean",boot_method="perc")
inf <- inference(nc$gained, type = "ci", method="simulation",
conflevel=0.95, est ="mean",boot_method="perc")
inf <- inference(nc$gained, type = "ci", method="simulation",
conflevel=0.95, est ="mean",boot_method="se")
conflevel=0.95, est ="median",boot_method="se")
# boot_method = {perc, se} ### Whats de difference?
inference(nc$gained, type = "ci", method="simulation",
conflevel=0.95, est ="median",boot_method="se")
t.test(nc$gained)
inference(nc$gained, type = "ci", method="simulation",
inference(nc$gained, type = "ci", method="simulation",
conflevel=0.95, est ="mean",boot_method="se")
inference(nc$fage, type="ci", method="simulation", conflevel=0.95,
est="mean", boot_method="se")
plot(nc$weight ~ nc$habit)
plot(nc$weight ~ nc$habi)
by(nc$gained,, nc$habit, median)
by(nc$gained, nc$habit, median)
by(nc$weight, nc$habit, median)
by(nc$weight, nc$habit, length)
inference(y=nc$weight, x=nc$habit, est= "mean", type="ht", null=0
alternative="twosided", method = "theoretical")
inference(y=nc$weight, x=nc$habit, est= "mean", type="ht", null=0,
alternative="twosided", method = "theoretical")
inference(y=nc$weight, x=nc$habit, est= "mean", type="ht", null=0,
alternative="twosided", method = "theoretical")
# Mudando a ordem
inference(y=nc$weight, x=nc$habit, est= "mean", type="ht", null=0,
alternative="twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
inference(y=nc$weight, x=nc$habit, est= "mean", type="ci", null=0,
alternative="twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/gss.Rdata")))
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/gss.Rdata"))
head(gss)
head(gss)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/gss.Rdata"))
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/gss.Rdata"))
head(gss)
summary(gss$wordsum)
summary(gss$class)
hist(gss$wordsum)
boxplot(gss$wordsum)
by(gss$wordsum, gss$class, mean)
plot(gss$wordsum ~ gss$class)
inference(y= gss$wordsum, x= gss$class, est = "mean", method = "theoretical",
type="ht", alternative="greater")
inference(y= gss$wordsum, x= gss$class, est = "mean", method = "theoretical",
type="ht", alternative="greater")
inference(y= gss$wordsum, x= gss$class, est = "mean", method = "theoretical",
conflevel=0.95, type="ht", alternative="greater")
inference(y = gss$wordsum, x = gss$class,
est = "mean", method = "theoretical",
type = "ht", alternative = "greater")
inference(y = gss$wordsum, x = gss$class,
est = "mean", method = "theoretical",
type = "ht", alternative = "greater")
myts <- ts(myvector, start=c(2009,1),end=c(2014,12),
frequency=12)
require(XLConnect)
setwd("C:\Users\Euler\Documents\GitHub\time series")
setwd("C:\\Users\\Euler\\Documents\\GitHub\\time series")
wb <- loadWorkbook("ipca_201504SerieHist.xls")
myvector <- readWorksheet("ipca_201504SerieHist.xls")
myvector <- readWorksheetFromFile("ipca_201504SerieHist.xls",
sheet=1)
require(XLConnect)
require("XLConnect")
install.packages("XLConnect")
require("XLConnect")
myvector <- readWorksheetFromFile("ipca_201504SerieHist.xls",
sheet=2)
myvector <- readWorksheetFromFile("ipca_201504SerieHist.xlsx",
sheet=2)
myvector
myvector <- myvector[,-1]
myvector
mv <- readWorksheetFromFile("ipca_201504SerieHist.xlsx",
sheet=2)
mv <- mv[,-1]
leng_mv <- length(mv)
leng_mv
leng_mv <- nrow(mv)
leng_mv
myvector <- mv[1:48,]
myvector
myts <- ts(myvector, start=c(2009,1),end=c(2014,12),
frequency=12)
myts
mv <- mv[,c(-1,-3)]
leng_mv <- nrow(mv)
myvector <- mv[1:48,]
mv <- readWorksheetFromFile("ipca_201504SerieHist.xlsx",
sheet=2)
mv <- mv[,c(-1,-3)]
leng_mv <- nrow(mv)
myvector <- mv[1:48,]
myts <- ts(myvector, start=c(2009,1),end=c(2014,12),
frequency=12)
myts
mv <- readWorksheetFromFile("ipca_201504SerieHist.xlsx",
myvector <- mv[1:48,4]
mv <- readWorksheetFromFile("ipca_201504SerieHist.xlsx",
sheet=2)
myvector <- mv[1:48,4]
myts <- ts(myvector, start=c(2009,1),end=c(2014,12),
frequency=12)
myts
fit <- stl(myts, s.window="period")
plot(fit)
monthplot(myts)
library(forecast)
install.packages("forecast")
fit <- HoltWinters(myts, beta=FALSE, gamma=FALSE)
library(forecast)
accuracy(fit)
fit <- HoltWinters(myts, gamma=FALSE)
fit <- HoltWinters(myts)
library(forecast)
accuracy(fit)
library(forecast)
forecast(fit, 3)
plot(forecast(fit, 3))
fit <- arima(myts, order=c(p, d, q)
# predictive accuracy
library(forecast)
fit <- arima(myts, order=c(p, d, q))
library(forecast)
accuracy(fit)
p=1
q=1
d=0
fit <- arima(myts, order=c(p, d, q))
library(forecast)
accuracy(fit)
library(forecast)
forecast(fit, 5)
plot(forecast(fit, 5))
fit <- stl(myts, s.window="period")
plot(fit)
plot(myts)
